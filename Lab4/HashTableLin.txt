/*
 * "Linear Probing" puts the value in the next sequential key if there's a collision
 *  h(x) = x % sizeOfTable
 */

public class HashTableLin {
	private Integer[] table;
	private int sizeOfTable;
	private int keysStored;
	private double maxLoadFactor;
	
	public HashTableLin(int maxNum, double load)
	{
		try
		{
			this.sizeOfTable = initTableSize(Math.abs(maxNum), Math.abs(load));
			this.table = initTable(sizeOfTable);
			this.maxLoadFactor = load;
			this.keysStored = 0;
		}catch(Exception e) {System.out.println("Invalid Input");}
	}
	
	public Integer[] initTable(int table)
	{
		Integer[] newTable = new Integer[table];
		for(int i = 0; i < newTable.length; i++)
		{
			newTable[i] = null;
		}
		return newTable;
	}
	
	public int initTableSize(int maxnum, double load)
	{
		int start = (int)Math.ceil(maxnum / load);
		while(!isPrime(start))
		{start++;}
		
		return start;
	}
	
	public static boolean isPrime(int n)
	{
		for(int i = 2; i < n; i++)
		{
			if(n % i == 0)
			{
				//If in here, 'n' is not prime
				return false;
			}
		}
		//If here, 'n' is prime
		return true;
	}
	
	public double getLoad()
	{
		return (double)this.keysStored / this.sizeOfTable;
	}
	
	public void insert(int n)
	{
		if(this.isIn(n))
		{
			return;
		}
		int key = this.getKey(n);
		this.table[key] = n;
		this.keysStored++;
		
		if(this.getLoad() > this.maxLoadFactor)
		{
			System.out.println("rehash occuring...");
			this.rehash();
		}
	}
	
	public void rehash()
	{
		Integer[] oldTable = this.table;
		//Prepare/Reset the table to be rehashed
		this.sizeOfTable = this.sizeOfTable * 2; while(!isPrime(this.sizeOfTable)) {this.sizeOfTable++;}
		this.table = initTable(this.sizeOfTable);
		this.keysStored = 0;
		
		//Rehash all the old values into the new table (old table is HALF the size of the new table)
		for(int i = 0; i < oldTable.length; i++)
		{
			//protect against null pointer errors
			if(oldTable[i] != null)
			{
				this.insert(oldTable[i]);
			}
		}
	}
	
	public boolean isIn(int n)
	{
		for(int i = 0; i < this.sizeOfTable; i++)
		{
			//If n is within the table, return true
			if(this.table[i] != null && this.table[i] == n)
			{return true;}
		}
		//If program gets here, (n) is not in the hash table
		return false;
	}
	
	public void printKeys()
	{
		//Run through table and print - in no particular order
		for(int i = 0; i < this.sizeOfTable; i++)
		{
			System.out.print(this.table[i] + ", ");
		}
	}
	
	public void printKeysAndIndexes()
	{
		for(int i = 0; i < this.sizeOfTable; i++)
		{
			System.out.println(i + "\t" + this.table[i]);
		}
	}
	
	/*
	 * Implements Linear Probing
	 */
	public int getKey(int n)
	{
		int key = (n) % this.sizeOfTable;
		int i = 0;
		//Increase i by one as long as there's a collision
		while(this.table[key + i] != null)
		{i++;}
		//Return finalized key
		return (key + i);
	}
	
	public int getSizeOfTable()
	{return this.sizeOfTable;}
	
	public int getKeysStored()
	{return this.keysStored;}
	
	public double getMaxLoadFactor()
	{return this.maxLoadFactor;}
	
}
